Major	Minor	Question	Title
8	1	"A child is running up a staircase with *n* steps and can hop either 1 step, 2 steps, or 3 steps at a time.
Implement a method to count how many possible ways the child can run up the stairs. "	Triple Step
8	2	"Imagine a robot sitting on the upper left corner of a grid with *r* rows and *c* columns.
The robot can only move in two directions, right and down, but certain cells are ""off limits"" such that the robot cannot step on them.  Design an algorithm to find a path for the robot from the top left to the bottom right."	Robot in a Grid
8	3	"A magic index in an array A[0 ... n - 1] is defined to be an index such that A[i] = i.
Given a sorted array of distinct integers, write a method to find a magic index, if one exists, in array A."	Magic Index
8	4	Write a method to return all subsets of a set.	Power Set
8	5	Write a recursive function to multiply two positive integers without using the * operator.  You can use addition, subtraction, and bit shifting, but you should minimize the number of those operations.	Recursive Multiply
8	6	"In the classic problem of the Towers of Hanoi, you have 3 towers and N disks of different sizes which can slide onto any tower.  The puzzle starts with disks sorted in ascending order of size from top to bottom (i.e., each disk sits on top of an even larger one).
You have the following constraints:
(1) Only one disk can be moved at a time.
(2) A disk is slid off the top of one tower onto another tower.
(3) A disk cannot be placed on top of a smaller disk.

Write a program to move the disks from the first tower to the last using stacks.
"	Towers of Hanoi
8	7	Write a method to compute all permutations of a string of unique characters.	Permutations without Dups
8	8	"Write a method to compute all permuations of a string of whose characters are not necessarily unique.
The list of permutations should not have duplicates."	Permutations with Dups
8	9	"Implement an algorithm to print all valid (e.g., properly opened and closed) combinations of n pairs of parenthesis.
EXAMPLE
Input:  3
Output: ((())), (()()), (())(), ()(()), ()()()
"	Parens
8	10	"Implement the ""paint fill"" function that one might see on many image editing programs.  That is, given a screen (represented by a two-dimensional array of colors), a point, and a new color, fill in the surrounding area until the color changes from the original color."	Paint Fill
8	11	Given an infinite number of quarters (25 cents), dimes (10 cents), nickels (5 cents), and pennies (1 cent), write code to calculate the number of ways of representing n cents.	Coins
8	12	"Write an algorithm to print all ways of arranging eight queens on an 8x8 chess board so that none of them share the same row, column, or diagonal.  In this case, ""diagonal"" means all diagonals, not just the two that bisect the board.
"	Eight Queens
8	13	You have a stack of *n* boxes, with widths *w_i*, heights *h_i*, and depths *d_i*.  The boxes cannot be rotated and can can only be stacked on top of one another if each box in the stack is strictly larger than the box above it in width, height, and depth.  Implement a method to compute the height of the tallest possible stack.  The height of a stack is the sum of the heights of each box.	Stack of Boxes
8	14	Given an boolean expression consisting of the symbols 0 (false), 1 (true), & (AND), | (OR), and ^ (XOR), and a desired boolean result value *result*, implement a function to count the number of ways of parenthesizing the expression such that it evaluates to the result.  The expression should be fully parenthesized (e.g., (0)^(1)) but not extraneously (e.g., (((0))^(1))).	Boolean Evaluation
